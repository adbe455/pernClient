{"version":3,"sources":["components/Logout.js","components/Header.js","components/Searchbar.js","components/Splash.js","components/Login.js","components/Signup.js","components/Searchpage.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Logout","props","to","className","onClick","logout","Header","Navbar","light","expand","NavbarBrand","href","token","Nav","navbar","NavItem","Searchbar","useState","search","setSearch","offset","InputGroup","Input","onChange","e","target","value","InputGroupAddon","addonType","Button","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","catch","err","console","log","Splash","Jumbotron","id","fluid","Container","Login","username","setUsername","password","setPassword","hideToggle","setHideToggle","redirect","setRedirect","Form","style","marginTop","FormGroup","Label","for","type","user","data","tokenHandler","sessionToken","Searchpage","Main","setToken","storeSessionToken","Fragment","exact","path","component","render","Signup","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7926c5a3.chunk.js","sourcesContent":["import React from 'react';\r\n// import {\r\n//     NavLink\r\n// } from 'reactstrap';\r\nimport { Link } from 'react-router-dom'\r\nimport '../styles.css';\r\n\r\nconst Logout = (props) => {\r\n    return(\r\n        <Link to='/' className=\"nav-item\" onClick={props.logout}>Logout</Link>\r\n    )\r\n}\r\n\r\nexport default Logout;","import React, { useState } from 'react';\r\nimport {\r\n    Navbar,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink\r\n} from 'reactstrap';\r\nimport '../styles.css';\r\nimport Logout from './Logout';\r\n// import Login from './Login';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst Header = (props) => {\r\n\r\n  return (\r\n    <Navbar className=\"red\" light expand=\"md\">\r\n      <NavbarBrand href=\"/\">Game Critic</NavbarBrand>\r\n          {props.token ? \r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <Logout/>\r\n            </NavItem>\r\n          </Nav> : \r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <Link to=\"/login\" className=\"nav-item\">Log In</Link>\r\n            </NavItem>\r\n            <NavItem>\r\n              <Link to=\"/signup\" className=\"nav-item\" >Sign Up</Link>\r\n            </NavItem>\r\n          </Nav>}\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport {\r\n    InputGroup,\r\n    Input,\r\n    InputGroupAddon,\r\n    Button\r\n} from 'reactstrap';\r\n\r\nconst Searchbar = () => {\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [offset, setOffset] = useState(0);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n\r\n\r\n    let handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        fetch('https://api-v3.igdb.com/games', {\r\n            method: 'POST',\r\n            headers: {\r\n                'user-key':'cc5441053548ed186c2e6a3add7af2f1',\r\n                'Accept':'application/json'\r\n            },\r\n            body: JSON.stringify(`\r\n                search ${search};\r\n                offset ${offset};\r\n                fields name, first_release_date, genres, cover.*;\r\n                where themes != 42;\r\n                limit 50;\r\n            `)\r\n        })\r\n        .then(res => res.json())\r\n        // .then(data => setResults(data))\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    return(\r\n        <InputGroup className='search-bar justify-content-center'>\r\n            <Input className='col-4' onChange={(e) => setSearch(e.target.value)} />\r\n            <InputGroupAddon addonType=\"append\"><Button onClick={(e) => handleSubmit(e)}>Find game</Button></InputGroupAddon>\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","import React from 'react';\r\nimport {\r\n    Jumbotron,\r\n    Container\r\n} from 'reactstrap';\r\nimport '../styles.css';\r\nimport Searchbar from './Searchbar'\r\n\r\nconst Splash = () => {\r\n    return(\r\n        <div className='darkred'>\r\n            <Jumbotron id='jumbotron' fluid>\r\n                <Container fluid>\r\n                    <h1 className=\"display-3 d-flex justify-content-center\">Game Critic</h1>\r\n                    <p className=\"lead d-flex justify-content-center\">Community reviews and info on your favorite games</p>\r\n                </Container>\r\n            </Jumbotron>\r\n            <Searchbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Splash;","import React, { useState } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, InputGroup, InputGroupAddon } from 'reactstrap';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nconst Login = (props) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [hideToggle, setHideToggle] = useState(true);\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    let handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        fetch('http://localhost:3000/user/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type':'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                user: {\r\n                    username: username,\r\n                    password: password\r\n                }\r\n            })\r\n        }).then( res => res.json())\r\n        .then(data => {\r\n            props.tokenHandler(data.sessionToken);\r\n            console.log('Session token: ' + data.sessionToken);\r\n            setRedirect(true);\r\n        })\r\n    }\r\n\r\n    return(\r\n        <Form style={{marginTop: '10vh'}} className=\"mx-auto col-lg-4\">\r\n            <FormGroup>\r\n                <Label for=\"username\">Username</Label>\r\n                <Input onChange={(e) => setUsername(e.target.value)} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for=\"password\">Password</Label>\r\n            <InputGroup>\r\n                <Input onChange={(e) => setPassword(e.target.value)} type={hideToggle ? \"password\" : \"\"}/>\r\n                <InputGroupAddon addonType=\"append\">\r\n                    <Button onClick={(e) => {e.preventDefault(); setHideToggle(!hideToggle)}}>\r\n                        {hideToggle ? 'Show' : 'Hide'}\r\n                    </Button>\r\n                    {redirect ? <Redirect to='/'/> : null}\r\n                </InputGroupAddon>\r\n            </InputGroup>\r\n            </FormGroup>\r\n            <FormGroup className=\"text-center\">\r\n                <Button onClick={(e) => handleSubmit(e)}>Login</Button>\r\n            </FormGroup>\r\n        </Form>    \r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, InputGroup, InputGroupAddon } from 'reactstrap';\r\n\r\n\r\nconst Login = (props) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [hideToggle, setHideToggle] = useState(true);\r\n\r\n    let handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        fetch('http://localhost:3000/user/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type':'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                username: username,\r\n                password: password\r\n            })\r\n        }).then( res => res.json())\r\n        .then(data => {\r\n            props.tokenHandler(data.sessionToken);\r\n            console.log('Session token: ' + data.sessionToken)\r\n        })\r\n    }\r\n\r\n    return(\r\n        <Form style={{marginTop: '10vh'}} className=\"mx-auto col-lg-4\">\r\n            <FormGroup>\r\n                <Label for=\"username\">Username</Label>\r\n                <Input onChange={(e) => setUsername(e.target.value)} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for=\"password\">Password</Label>\r\n            <InputGroup>\r\n                <Input onChange={(e) => setPassword(e.target.value)} type={hideToggle ? \"password\" : \"\"}/>\r\n                <InputGroupAddon addonType=\"append\">\r\n                    <Button onClick={(e) => {e.preventDefault(); setHideToggle(!hideToggle)}}>\r\n                    {hideToggle ? 'Show' : 'Hide'}\r\n                    </Button>\r\n                </InputGroupAddon>\r\n            </InputGroup>\r\n            </FormGroup>\r\n            <FormGroup className=\"text-center\">\r\n                <Button onClick={(e) => handleSubmit(e)}>Login</Button>\r\n            </FormGroup>\r\n        </Form>    \r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport Searchbar from './Searchbar';\r\nimport '../styles.css'\r\n\r\nconst Searchpage = () => {\r\n    return(\r\n        <div>\r\n            <Searchbar />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchpage;","import React, { useState } from 'react';\r\nimport '../styles.css';\r\nimport Header from './Header'\r\nimport Splash from './Splash';\r\nimport Login from './Login'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Signup from './Signup';\r\nimport Searchpage from './Searchpage';\r\n\r\n\r\n\r\n\r\nconst Main = () => {\r\n\r\n    const [token, setToken] = useState(false)\r\n\r\n    let storeSessionToken = (token) => {\r\n      setToken(token)\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div className='main'>\r\n                <Router>\r\n                    <Header token={token} />\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={ Splash } />\r\n                        <Route exact path=\"/login\" render={(props) => <Login {...props} tokenHandler={storeSessionToken}/>}/>\r\n                        <Route exact path=\"/signup\" render={(props) => <Signup {...props} tokenHandler={storeSessionToken}/>} />\r\n                        <Route exact path=\"/search\" component={ Searchpage } />\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport Main from './components/Main';\nimport './styles.css';\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <Main />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}